{"version":3,"sources":["components/TaskRow.js","App.js","actions/index.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["TaskRow","this","props","task","name","React","Component","App","state","className","htmlFor","id","type","placeholder","onChange","e","setState","target","value","onClick","addTask","status","tasks","map","colSpan","filter","markTaskAsDone","removeTask","connect","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","newState","indexOfSelected","i","length","index","console","log","ReactDOM","render","StrictMode","store","createStore","document","getElementById"],"mappings":"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","file":"static/js/main.dd82c7ef.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass TaskRow extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n        <tr>\r\n            <td>\r\n                {this.props.task.name}\r\n            </td>\r\n        </tr>\r\n      );\r\n    }\r\n}\r\n\r\nexport default TaskRow;","import './App.css';\nimport { connect } from 'react-redux';\nimport TaskRow from './components/TaskRow';\nimport React from 'react';\nimport { addTask, markTaskAsDone, removeTask } from './actions';\n\nclass App extends React.Component {\n\n  state = {\n    task: '', \n  }\n\n  render() {\n    return(\n      <div className=\"App-header\">\n        <h1>To-Do List App</h1>\n        <label htmlFor=\"new-task\">New Task: </label>\n        <input id=\"new-task\" type=\"text\" placeholder=\"Enter new task\"\n          onChange = {\n            (e) => this.setState({task: e.target.value})\n          }\n        />\n        <button \n          onClick = {\n            () => this.props.addTask({name: this.state.task, status: 'pending'})\n          }\n        >Submit</button>\n        <br />\n        <table>\n          <thead>\n            <tr>\n              <th>All Tasks</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.props.tasks.map(\n                function(task){\n                  return <TaskRow \n                    key={task.name}\n                    task={task}\n                  />\n                }\n              )\n            }\n          </tbody>\n        </table>\n        <br />\n        <table>\n          <thead>\n            <tr>\n              <th colSpan=\"2\">Pending Tasks</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.props.tasks.filter((task) => {\n                return task.status === \"pending\";\n              }).map(\n                (task) => {\n                  return (\n                    <tr key={task.name}>\n                      <td>{task.name}</td>\n                      <td>\n                        <button \n                          onClick = {\n                            () => this.props.markTaskAsDone(task.name)\n                          }>Mark as Done\n                        </button>\n                      </td>\n                    </tr>\n                  );\n                }\n              )\n            }\n          </tbody>\n        </table>\n        <br />\n        <table>\n          <thead>\n            <tr>\n              <th colSpan=\"2\">Done Tasks</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.props.tasks.filter((task) => {\n                return task.status === \"done\";\n              }).map(\n                (task) => {\n                  return (\n                    <tr key={task.name}>\n                      <td>{task.name}</td>\n                      <td>\n                        <button \n                          onClick = {\n                            () => this.props.removeTask(task.name)\n                          }>Remove Task\n                        </button>\n                      </td>\n                    </tr>\n                  );\n                }\n              )\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  // console.log(state);\n\n  return state;\n}\n\nexport default connect(mapStateToProps, { addTask, markTaskAsDone, removeTask })(App);\n/*short hand for addTask:addTask*/","export const addTask = (task) => {\r\n  return {\r\n    type: 'ADD_TASK',\r\n    payload: task,     \r\n  }\r\n};\r\n\r\nexport const markTaskAsDone = (task) => {\r\n  return {\r\n    type: 'MARK_TASK_AS_DONE',\r\n    payload: task,  \r\n  }  \r\n}\r\n\r\nexport const removeTask = (task) => {\r\n    return {\r\n      type: 'REMOVE_TASK',\r\n      payload: task,  \r\n    }  \r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    tasks: [\r\n      {name: \"eat\", status: \"pending\"},\r\n      {name: \"code\", status: \"pending\"},\r\n      {name: \"sleep\", status: \"done\"}\r\n    ],\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  if (action.type === 'ADD_TASK') {\r\n    let newState = {...state};\r\n    newState.tasks = [...newState.tasks, action.payload];\r\n    \r\n    return (newState);\r\n  }\r\n  else if(action.type === 'MARK_TASK_AS_DONE') { \r\n    let indexOfSelected;\r\n    let newState = {...state}; \r\n\r\n    for(let i = 0; i < newState.tasks.length; ++i) {\r\n      if(newState.tasks[i].name === action.payload){\r\n        indexOfSelected = i;\r\n        break;\r\n      }    \r\n    }\r\n\r\n    newState = {\r\n      ...state,\r\n      tasks: newState.tasks.map((task, index) => {\r\n        return (index === indexOfSelected ? {...task, status: 'done'} : task);\r\n      })\r\n    }; \r\n\r\n    console.log(newState);\r\n\r\n    return (newState);\r\n  }\r\n  else if (action.type === 'REMOVE_TASK') {\r\n    let newState = {...state};\r\n\r\n    // let indexOfItemtoRemove;\r\n    // for(let i = 0; i < newState.tasks.length; ++i) {\r\n    //   if(newState.tasks[i].name === action.payload){\r\n    //     indexOfItemtoRemove = i;\r\n    //     break;\r\n    //   }    \r\n    // }\r\n\r\n    newState.tasks = newState.tasks.filter((task) => {\r\n      return task.name !== action.payload;        \r\n    });\r\n\r\n    // console.log(indexOfItemtoRemove);\r\n\r\n    // newState.tasks = newState.tasks.splice(1, 1);\r\n    //can't get splice to work as intended for deleting elements\r\n\r\n    return (newState);\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport  { createStore } from 'redux';\nimport reducer from './reducers';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={createStore(reducer)}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}